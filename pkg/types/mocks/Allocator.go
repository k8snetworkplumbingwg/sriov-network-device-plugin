// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	types "github.com/k8snetworkplumbingwg/sriov-network-device-plugin/pkg/types"
	mock "github.com/stretchr/testify/mock"
	v1beta1 "k8s.io/kubelet/pkg/apis/deviceplugin/v1beta1"
)

// Allocator is an autogenerated mock type for the Allocator type
type Allocator struct {
	mock.Mock
}

// Allocate provides a mock function with given fields: _a0, _a1
func (_m *Allocator) Allocate(_a0 *v1beta1.ContainerPreferredAllocationRequest, _a1 types.ResourcePool) []string {
	ret := _m.Called(_a0, _a1)

	var r0 []string
	if rf, ok := ret.Get(0).(func(*v1beta1.ContainerPreferredAllocationRequest, types.ResourcePool) []string); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

type mockConstructorTestingTNewAllocator interface {
	mock.TestingT
	Cleanup(func())
}

// NewAllocator creates a new instance of Allocator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAllocator(t mockConstructorTestingTNewAllocator) *Allocator {
	mock := &Allocator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
